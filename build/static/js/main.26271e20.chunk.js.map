{"version":3,"sources":["dispatcher.js","store/technicianData.js","action/technicianActions.js","components/shiftSwitch.js","components/technicianSearchList.js","components/nameAndDate.js","components/tableAndDescription.js","components/progressAndSubmit.js","App.js","serviceWorker.js","index.js"],"names":["Dispatcher","download","require","technicianData","shiftOptions","searchTerm","formProgress","selectedTechnician","hasValidDate","formData","dayjs","format","Description","ShiftType","ShiftDetails","Day","FromTime","EndTime","technicianCompleteList","listJson","JSON","stringify","this","emit","addOrEditTechnician","shiftType","technician","map","e","index","split","term","name","date","value","type","parseInt","newTechnician","id","Date","getTime","toString","schedule","push","findIndex","updateSelectedTechician","splice","progress","scheduleCompleted","i","length","calculateProgress","selectedShiftType","technicianSearchList","trim","toLocaleLowerCase","includes","action","updateShiftType","updateSearchTerm","updateNameField","updateExpirationDate","updateDescription","validateNameAndDate","deleteTechnician","updateSchedule","timeType","downloadList","EventEmitter","dispatcher","register","handleActions","bind","updateSelectedTechnician","dispatch","ShiftSwitch","styles","shiftButton","padding","borderColor","color","shiftButtonSelected","background","state","TechnicianData","getShiftData","on","setState","ButtonGroup","aria-label","Button","key","style","onClick","selectShiftType","Component","TechnicianSearchList","container","margin","width","technicianList","maxHeight","minHeight","overflow","border","borderRadius","technicianListItem","technicianListItemSelected","search","position","marginLeft","boxSizing","height","lineHeight","paddingLeft","marginBottom","searchResults","left","zIndex","searchIcon","newBtn","deleteBtn","downloadBtn","getTechnicianSearchList","selectedTechnicianId","getSelectedTechnician","getTechnicianCompleteList","showSearchResults","that","document","addEventListener","selectTechnician","InputBase","placeholder","onChange","event","suggestSearch","target","Card","List","component","ListItem","button","ListItemText","primary","variant","extend","isBetween","NameAndDate","datePickerPos","marginTop","nameFieldValue","expirationDate","getFormDate","showNameError","showDateError","isValid","classes","props","TextField","onFocus","resetNameValidate","error","helperText","className","nameField","label","changeNameValue","utils","DateFnsUtils","resetDateValidate","inputVariant","handleDateChange","withStyles","theme","TableAndDescription","table","textAreaPos","textAreaLabel","verticalAlign","textArea","fontSize","tableRow","timeInputField","tableHeaderText","description","getDescription","getShiftSchedule","day","Fragment","InputProps","inputProps","min","max","changeTimeValue","Divider","TextareaAutosize","rowsMin","handleDescriptionChange","ProgressAndSubmit","getFormProgress","LinearProgress","valueBuffer","progressBar","size","submitBtn","backgroundColor","right","top","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26271e20.chunk.js","sourcesContent":["import { Dispatcher } from \"flux\";\r\n\r\nexport default new Dispatcher();\r\n","import { EventEmitter } from \"events\";\r\nimport dispatcher from \"../dispatcher\";\r\nimport dayjs from \"dayjs\";\r\nconst download = require(\"downloadjs\");\r\n\r\n// manages all the data including the user input form data and the list of technician\r\nclass TechnicianData extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n    this.shiftOptions = [\"Regular\", \"Extra\"]; // shift type options\r\n    this.searchTerm = \"\"; // search term in the search field\r\n    this.formProgress = 25; // default completion value set at 25 because the expiration date is set at current day by default\r\n    this.selectedTechnician = \"\"; // the technician selected from the right list or from the search results\r\n    this.hasValidDate = true; // if user entered a valid date\r\n    this.formData = {\r\n      \"Tech Lead\": \"\",\r\n      \"Expiration Date\": dayjs().format(\"MM/DD/YYYY\"),\r\n      Description: \"\",\r\n      ShiftType: \"Regular\",\r\n      ShiftDetails: [\r\n        {\r\n          Day: \"Monday\",\r\n          FromTime: \"\",\r\n          EndTime: \"\"\r\n        },\r\n        {\r\n          Day: \"Tuesday\",\r\n          FromTime: \"\",\r\n          EndTime: \"\"\r\n        },\r\n        {\r\n          Day: \"Wednesday\",\r\n          FromTime: \"\",\r\n          EndTime: \"\"\r\n        },\r\n        {\r\n          Day: \"Thursday\",\r\n          FromTime: \"\",\r\n          EndTime: \"\"\r\n        },\r\n        {\r\n          Day: \"Friday\",\r\n          FromTime: \"\",\r\n          EndTime: \"\"\r\n        },\r\n        {\r\n          Day: \"Saturday\",\r\n          FromTime: \"\",\r\n          EndTime: \"\"\r\n        },\r\n        {\r\n          Day: \"Sunday\",\r\n          FromTime: \"\",\r\n          EndTime: \"\"\r\n        }\r\n      ]\r\n    };\r\n    this.technicianCompleteList = []; // list of technician data\r\n    this.listJson = JSON.stringify([]); // data stored in JSON format\r\n  }\r\n  validateNameAndDate() {\r\n    // validate required value name and date\r\n    if (!this.hasValidDate) {\r\n      this.emit(\"noValidDate\");\r\n    }\r\n    if (this.formData[\"Tech Lead\"] === \"\") {\r\n      this.emit(\"emptyName\");\r\n    } else if (this.hasValidDate) {\r\n      this.addOrEditTechnician();\r\n    }\r\n  }\r\n\r\n  updateShiftType(shiftType) {\r\n    this.formData.ShiftType = shiftType;\r\n    this.emit(\"ShiftTypeChange\");\r\n  }\r\n\r\n  updateSelectedTechician(technician) {\r\n    this.selectedTechnician = technician;\r\n    if (technician === \"\") {\r\n      this.formData[\"Tech Lead\"] = \"\";\r\n      this.formData.ShiftType = \"Regular\";\r\n      this.formData[\"Expiration Date\"] = dayjs().format(\"MM/DD/YYYY\");\r\n      this.formData.Description = \"\";\r\n      this.formData.ShiftDetails.map(e => {\r\n        e.FromTime = \"\";\r\n        e.EndTime = \"\";\r\n        return 0;\r\n      });\r\n    } else {\r\n      this.formData[\"Tech Lead\"] = technician[\"Tech Lead\"];\r\n      this.formData.ShiftType = technician.ShiftType;\r\n      this.formData[\"Expiration Date\"] = technician[\"Expiration Date\"];\r\n      this.formData.Description = technician.Description;\r\n      this.formData.ShiftDetails.map((e, index) => {\r\n        e.FromTime = technician.ShiftDetails[index].FromTime.split(\":\")[0];\r\n        e.EndTime = technician.ShiftDetails[index].EndTime.split(\":\")[0];\r\n        return 0;\r\n      });\r\n    }\r\n    this.emit(\"selectedTechnicianChange\");\r\n    this.emit(\"ShiftTypeChange\");\r\n    this.emit(\"expirationDateChange\");\r\n    this.emit(\"descriptionChange\");\r\n    this.emit(\"scheduleChange\");\r\n    this.emit(\"formProgressChange\");\r\n  }\r\n\r\n  updateSearchTerm(term) {\r\n    this.searchTerm = term;\r\n    this.emit(\"searchTermChange\");\r\n  }\r\n\r\n  updateNameField(name) {\r\n    this.formData[\"Tech Lead\"] = name;\r\n    this.emit(\"nameValueChange\");\r\n    this.emit(\"formProgressChange\");\r\n  }\r\n\r\n  updateExpirationDate(date) {\r\n    if (date === \"invalid\") {\r\n      this.hasValidDate = false;\r\n    } else {\r\n      this.hasValidDate = true;\r\n      this.formData[\"Expiration Date\"] = date;\r\n      this.emit(\"expirationDateChange\");\r\n    }\r\n    this.emit(\"formProgressChange\");\r\n  }\r\n\r\n  updateDescription(value) {\r\n    this.formData.Description = value;\r\n    this.emit(\"descriptionChange\");\r\n    this.emit(\"formProgressChange\");\r\n  }\r\n\r\n  updateSchedule(index, type, value) {\r\n    value = value > 23 ? 23 : value;\r\n    value = value < 0 ? 0 : value;\r\n    this.formData.ShiftDetails[index][type] = value;\r\n    if (\r\n      type === \"FromTime\" &&\r\n      this.formData.ShiftDetails[index].EndTime !== \"\" &&\r\n      parseInt(value) > parseInt(this.formData.ShiftDetails[index].EndTime)\r\n    ) {\r\n      this.formData.ShiftDetails[index].EndTime = value;\r\n    }\r\n    if (\r\n      type === \"EndTime\" &&\r\n      this.formData.ShiftDetails[index].FromTime !== \"\" &&\r\n      parseInt(value) < parseInt(this.formData.ShiftDetails[index].FromTime)\r\n    ) {\r\n      this.formData.ShiftDetails[index].FromTime = value;\r\n    }\r\n    this.emit(\"scheduleChange\");\r\n    this.emit(\"formProgressChange\");\r\n  }\r\n\r\n  getShiftSchedule() {\r\n    return this.formData.ShiftDetails;\r\n  }\r\n\r\n  addOrEditTechnician() {\r\n    // add new technician object to the list of technician or edit a current one\r\n    if (this.selectedTechnician === \"\") {\r\n      let newTechnician = {\r\n        id: new Date().getTime().toString(),\r\n        ShiftType: this.formData.ShiftType,\r\n        \"Tech Lead\": this.formData[\"Tech Lead\"],\r\n        \"Expiration Date\": this.formData[\"Expiration Date\"],\r\n        Description: this.formData.Description\r\n      };\r\n      let schedule = [];\r\n      this.formData.ShiftDetails.map(e => {\r\n        schedule.push({\r\n          Day: e.Day,\r\n          FromTime: `${e.FromTime !== \"\" ? e.FromTime + \":00\" : \"\"}`,\r\n          EndTime: `${e.EndTime !== \"\" ? e.EndTime + \":00\" : \"\"}`\r\n        });\r\n        return 0;\r\n      });\r\n      newTechnician.ShiftDetails = schedule;\r\n      this.technicianCompleteList.push(newTechnician);\r\n    } else {\r\n      let id = this.selectedTechnician.id;\r\n      let index = this.technicianCompleteList.findIndex(e => e.id === id);\r\n      this.technicianCompleteList[index][\"Tech Lead\"] = this.formData[\r\n        \"Tech Lead\"\r\n      ];\r\n      this.technicianCompleteList[index][\"Expiration Date\"] = this.formData[\r\n        \"Expiration Date\"\r\n      ];\r\n      this.technicianCompleteList[index].ShiftType = this.formData.ShiftType;\r\n      this.technicianCompleteList[\r\n        index\r\n      ].Description = this.formData.Description;\r\n      let schedule = [];\r\n      this.formData.ShiftDetails.map(e => {\r\n        schedule.push({\r\n          Day: e.Day,\r\n          FromTime: `${e.FromTime !== \"\" ? e.FromTime + \":00\" : \"\"}`,\r\n          EndTime: `${e.EndTime !== \"\" ? e.EndTime + \":00\" : \"\"}`\r\n        });\r\n        return 0;\r\n      });\r\n      this.technicianCompleteList[index].ShiftDetails = schedule;\r\n    }\r\n    this.listJson = JSON.stringify(this.technicianCompleteList); // store list in JSON format\r\n    this.updateSelectedTechician(\"\");\r\n  }\r\n\r\n  deleteTechnician(id) {\r\n    // remove a technician object from the list\r\n    let index = this.technicianCompleteList.findIndex(e => e.id === id);\r\n    this.technicianCompleteList.splice(index, 1);\r\n  }\r\n\r\n  downloadList() {\r\n    // output the JSON file for download\r\n    download(this.listJson, \"technicianShift.json\", \"json\");\r\n  }\r\n\r\n  calculateProgress() {\r\n    // calculate the progress upon each uesr input\r\n    let progress = 0;\r\n    progress += this.formData[\"Tech Lead\"] === \"\" ? 0 : 25;\r\n    progress += this.hasValidDate ? 25 : 0;\r\n    progress += this.formData.Description === \"\" ? 0 : 25;\r\n    let scheduleCompleted = true;\r\n    for (let i = 0; i < this.formData.ShiftDetails.length; i++) {\r\n      if (\r\n        this.formData.ShiftDetails[i].FromTime === \"\" ||\r\n        this.formData.ShiftDetails[i].EndTime === \"\"\r\n      ) {\r\n        scheduleCompleted = false;\r\n        break;\r\n      }\r\n    }\r\n    progress += scheduleCompleted ? 25 : 0;\r\n    this.formProgress = progress;\r\n  }\r\n\r\n  getFormProgress() {\r\n    this.calculateProgress();\r\n    return this.formProgress;\r\n  }\r\n\r\n  getDescription() {\r\n    return this.formData.Description;\r\n  }\r\n\r\n  getShiftData() {\r\n    return {\r\n      shiftOptions: this.shiftOptions,\r\n      selectedShiftType: this.formData.ShiftType\r\n    };\r\n  }\r\n\r\n  getFormDate() {\r\n    return this.formData[\"Expiration Date\"];\r\n  }\r\n\r\n  getSelectedTechnician() {\r\n    return this.selectedTechnician;\r\n  }\r\n\r\n  getTechnicianCompleteList() {\r\n    return this.technicianCompleteList;\r\n  }\r\n\r\n  getTechnicianSearchList() {\r\n    let technicianSearchList = [];\r\n    if (this.searchTerm.trim() !== \"\") {\r\n      this.technicianCompleteList.map(e => {\r\n        if (e[\"Tech Lead\"].toLocaleLowerCase().includes(this.searchTerm)) {\r\n          technicianSearchList.push(e);\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    return technicianSearchList;\r\n  }\r\n\r\n  handleActions(action) {\r\n    switch (action.type) {\r\n      case \"UPDATE_SHIFT_TYPE\":\r\n        this.updateShiftType(action.shiftType);\r\n        break;\r\n      case \"UPDATE_SELECTED_TECHNICIAN\":\r\n        this.updateSelectedTechician(action.technician);\r\n        break;\r\n      case \"UPDATE_SEARCH_TERM\":\r\n        this.updateSearchTerm(action.term);\r\n        break;\r\n      case \"UPDATE_NAME_FIELD\":\r\n        this.updateNameField(action.name);\r\n        break;\r\n      case \"UPDATE_EXPIRATION_DATE\":\r\n        this.updateExpirationDate(action.date);\r\n        break;\r\n      case \"UPDATE_DESCRIPTION\":\r\n        this.updateDescription(action.value);\r\n        break;\r\n      case \"ADD_OR_EDIT_TECHNICIAN\":\r\n        this.validateNameAndDate();\r\n        break;\r\n      case \"DELETE_TECHNICIAN\":\r\n        this.deleteTechnician(action.id);\r\n        break;\r\n      case \"UPDATE_SCHEDULE\":\r\n        this.updateSchedule(action.index, action.timeType, action.value);\r\n        break;\r\n      case \"DOWNLOAD_LIST\":\r\n        this.downloadList();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n}\r\nconst technicianData = new TechnicianData();\r\ndispatcher.register(technicianData.handleActions.bind(technicianData));\r\n\r\nexport default technicianData;\r\n","import dispatcher from \"../dispatcher\";\r\n\r\n// this is the dispatcher file used to modified data in technicianData.js\r\nexport function updateShiftType(shiftType) {\r\n  dispatcher.dispatch({\r\n    type: \"UPDATE_SHIFT_TYPE\",\r\n    shiftType\r\n  });\r\n}\r\n\r\nexport function updateSelectedTechnician(technician) {\r\n  dispatcher.dispatch({\r\n    type: \"UPDATE_SELECTED_TECHNICIAN\",\r\n    technician\r\n  });\r\n}\r\n\r\nexport function updateSearchTerm(term) {\r\n  dispatcher.dispatch({\r\n    type: \"UPDATE_SEARCH_TERM\",\r\n    term\r\n  });\r\n}\r\n\r\nexport function updateNameField(name) {\r\n  dispatcher.dispatch({\r\n    type: \"UPDATE_NAME_FIELD\",\r\n    name\r\n  });\r\n}\r\n\r\nexport function updateExpirationDate(date) {\r\n  dispatcher.dispatch({\r\n    type: \"UPDATE_EXPIRATION_DATE\",\r\n    date\r\n  });\r\n}\r\n\r\nexport function updateDescription(value) {\r\n  dispatcher.dispatch({\r\n    type: \"UPDATE_DESCRIPTION\",\r\n    value\r\n  });\r\n}\r\n\r\nexport function updateSchedule(index, timeType, value) {\r\n  dispatcher.dispatch({\r\n    type: \"UPDATE_SCHEDULE\",\r\n    index,\r\n    timeType,\r\n    value\r\n  });\r\n}\r\n\r\nexport function addOrEditTechnician() {\r\n  dispatcher.dispatch({\r\n    type: \"ADD_OR_EDIT_TECHNICIAN\"\r\n  });\r\n}\r\n\r\nexport function deleteTechnician(id) {\r\n  dispatcher.dispatch({\r\n    type: \"DELETE_TECHNICIAN\",\r\n    id\r\n  });\r\n}\r\n\r\nexport function downLoadList() {\r\n  dispatcher.dispatch({\r\n    type: \"DOWNLOAD_LIST\"\r\n  });\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport TechnicianData from \"../store/technicianData\";\r\nimport { updateShiftType } from \"../action/technicianActions\";\r\n\r\n// switch to select regular or extra shift\r\nclass ShiftSwitch extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      shiftOptions: TechnicianData.getShiftData().shiftOptions, // options\r\n      selectedShiftType: TechnicianData.getShiftData().selectedShiftType // the shift type selected\r\n    };\r\n  }\r\n  styles = {\r\n    shiftButton: {\r\n      padding: \"5px 70px\",\r\n      borderColor: \"#00acc1\",\r\n      color: \"#00acc1\"\r\n    },\r\n    shiftButtonSelected: {\r\n      padding: \"5px 70px\",\r\n      borderColor: \"#00acc1\",\r\n      background: \"#00acc1\",\r\n      color: \"#ffffff\"\r\n    }\r\n  };\r\n  selectShiftType(shiftType) {\r\n    updateShiftType(shiftType);\r\n  }\r\n  componentDidMount() {\r\n    TechnicianData.on(\"ShiftTypeChange\", () => {\r\n      this.setState({\r\n        selectedShiftType: TechnicianData.getShiftData().selectedShiftType\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <ButtonGroup aria-label=\"outlined primary button group\">\r\n        {this.state.shiftOptions.map(shiftType => (\r\n          <Button\r\n            key={shiftType}\r\n            style={\r\n              this.state.selectedShiftType === shiftType\r\n                ? this.styles.shiftButtonSelected\r\n                : this.styles.shiftButton\r\n            }\r\n            onClick={() => this.selectShiftType(shiftType)}\r\n          >\r\n            {shiftType}\r\n          </Button>\r\n        ))}\r\n      </ButtonGroup>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShiftSwitch;\r\n","import React, { Component } from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport TechnicianData from \"../store/technicianData\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {\r\n  updateSelectedTechnician,\r\n  updateSearchTerm,\r\n  deleteTechnician,\r\n  downLoadList\r\n} from \"../action/technicianActions\";\r\n\r\n// search field and the complete list\r\nclass TechnicianSearchList extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      technicianSearchList: TechnicianData.getTechnicianSearchList(),\r\n      selectedTechnicianId: TechnicianData.getSelectedTechnician().id,\r\n      technicianCompleteList: TechnicianData.getTechnicianCompleteList(),\r\n      showSearchResults: false\r\n    };\r\n  }\r\n  styles = {\r\n    container: {\r\n      margin: \"auto\",\r\n      width: \"320px\"\r\n    },\r\n    technicianList: {\r\n      maxHeight: \"400px\",\r\n      minHeight: \"300px\",\r\n      overflow: \"hidden auto\",\r\n      border: \"solid 1px #00acc1\",\r\n      borderRadius: \"4px\",\r\n      width: \"300px\"\r\n    },\r\n    technicianListItem: {\r\n      width: \"300px\"\r\n    },\r\n    technicianListItemSelected: {\r\n      background: \"#00acc1\",\r\n      color: \"#ffffff\",\r\n      width: \"300px\"\r\n    },\r\n    search: {\r\n      position: \"relative\",\r\n      borderRadius: \"4px\",\r\n      border: \"1px #00acc1 solid\",\r\n      marginLeft: 0,\r\n      width: \"280px\",\r\n      boxSizing: \"border-box\",\r\n      height: \"40px\",\r\n      lineHeight: \"40px\",\r\n      paddingLeft: \"40px\",\r\n      marginBottom: \"40px\"\r\n    },\r\n    searchResults: {\r\n      width: \"280px\",\r\n      minHeight: \"40px\",\r\n      maxHeight: \"400px\",\r\n      overflow: \"hidden auto\",\r\n      position: \"absolute\",\r\n      left: \"-1px\",\r\n      zIndex: \"100\"\r\n    },\r\n    searchIcon: {\r\n      height: \"100%\",\r\n      position: \"absolute\",\r\n      left: \"10px\",\r\n      color: \"#00acc1\"\r\n    },\r\n    newBtn: {\r\n      padding: \"5px 20px\",\r\n      borderColor: \"#00acc1\",\r\n      background: \"#00acc1\",\r\n      color: \"#ffffff\",\r\n      margin: \"10px 10px 0\"\r\n    },\r\n    deleteBtn: {\r\n      padding: \"5px 20px\",\r\n      margin: \"10px 10px 0 10px\"\r\n    },\r\n    downloadBtn: {\r\n      border: \"1px #00796b solid\",\r\n      color: \"#00796b\",\r\n      background: \"#ffffff\",\r\n      margin: \"10px\"\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    let that = this;\r\n    document.addEventListener(\"click\", function(e) {\r\n      // a click listener that makes the search results disappear if a user clicks on anywhere on the page\r\n      that.setState({\r\n        showSearchResults: false\r\n      });\r\n    });\r\n    TechnicianData.on(\"selectedTechnicianChange\", () => {\r\n      this.setState({\r\n        selectedTechnicianId: TechnicianData.getSelectedTechnician().id\r\n      });\r\n    });\r\n    TechnicianData.on(\"searchTermChange\", () => {\r\n      this.setState({\r\n        technicianSearchList: TechnicianData.getTechnicianSearchList()\r\n      });\r\n    });\r\n  }\r\n  selectTechnician(technician = \"\") {\r\n    // load a technician from the list or from the test results\r\n    updateSelectedTechnician(technician);\r\n  }\r\n\r\n  deleteTechnician(id) {\r\n    deleteTechnician(id);\r\n    this.selectTechnician();\r\n  }\r\n\r\n  suggestSearch(searchTerm) {\r\n    // get search results\r\n    this.setState({\r\n      showSearchResults: true\r\n    });\r\n    updateSearchTerm(searchTerm);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={this.styles.container}>\r\n        <div style={this.styles.search}>\r\n          <div>\r\n            <SearchIcon style={this.styles.searchIcon} />\r\n            <InputBase\r\n              placeholder=\"Search Tech Lead…\"\r\n              onChange={event => this.suggestSearch(event.target.value)}\r\n            />\r\n            {this.state.technicianSearchList.length &&\r\n            this.state.showSearchResults ? (\r\n              <Card style={this.styles.searchResults} id=\"searchResults\">\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                  {this.state.technicianSearchList.map((technician, index) => (\r\n                    <ListItem\r\n                      style={this.styles.technicianListItem}\r\n                      button\r\n                      onClick={() => this.selectTechnician(technician)}\r\n                      key={index}\r\n                    >\r\n                      <ListItemText primary={technician[\"Tech Lead\"]} />\r\n                    </ListItem>\r\n                  ))}\r\n                </List>\r\n              </Card>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <div style={this.styles.technicianList}>\r\n            {this.state.technicianCompleteList.length > 0 ? (\r\n              <List component=\"nav\">\r\n                {this.state.technicianCompleteList.map((technician, index) => (\r\n                  <ListItem\r\n                    style={\r\n                      this.state.selectedTechnicianId === technician[\"id\"]\r\n                        ? this.styles.technicianListItemSelected\r\n                        : this.styles.technicianListItem\r\n                    }\r\n                    button\r\n                    onClick={() => this.selectTechnician(technician)}\r\n                    key={index}\r\n                  >\r\n                    <ListItemText primary={technician[\"Tech Lead\"]} />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            ) : (\r\n              <List component=\"nav\">\r\n                <ListItem>\r\n                  <ListItemText primary=\"No Tech Lead Added\" />\r\n                </ListItem>\r\n              </List>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <Button\r\n          variant=\"contained\"\r\n          style={this.styles.newBtn}\r\n          onClick={() => this.selectTechnician()}\r\n        >\r\n          New Tech Lead\r\n        </Button>\r\n        {this.state.selectedTechnicianId ? (\r\n          <Button\r\n            variant=\"contained\"\r\n            style={this.styles.deleteBtn}\r\n            color=\"secondary\"\r\n            onClick={() =>\r\n              this.deleteTechnician(this.state.selectedTechnicianId)\r\n            }\r\n          >\r\n            Delete Tech Lead\r\n          </Button>\r\n        ) : null}\r\n        <Button style={this.styles.downloadBtn} onClick={() => downLoadList()}>\r\n          Download list (json file)\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TechnicianSearchList;\r\n","import React, { Component } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport TechnicianData from \"../store/technicianData\";\r\nimport dayjs from \"dayjs\";\r\nimport isBetween from \"dayjs/plugin/isBetween\";\r\nimport {\r\n  updateNameField,\r\n  updateExpirationDate\r\n} from \"../action/technicianActions\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker\r\n} from \"@material-ui/pickers\";\r\n\r\ndayjs.extend(isBetween);\r\n\r\nconst styles = theme => ({\r\n  nameField: {\r\n    \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\": {\r\n      borderColor: \"#00acc1\"\r\n    }\r\n  }\r\n});\r\n\r\n// two input fields(name and date) components\r\nclass NameAndDate extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      selectedTechnician: TechnicianData.getSelectedTechnician(),\r\n      nameFieldValue: TechnicianData.getSelectedTechnician()[\"Tech Lead\"] || \"\",\r\n      expirationDate: TechnicianData.getFormDate(),\r\n      showNameError: false,\r\n      showDateError: false\r\n    };\r\n  }\r\n  styles = {\r\n    datePickerPos: {\r\n      marginTop: \"300px\"\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    TechnicianData.on(\"selectedTechnicianChange\", () => {\r\n      this.setState({\r\n        selectedTechnician: TechnicianData.getSelectedTechnician(),\r\n        nameFieldValue:\r\n          TechnicianData.getSelectedTechnician()[\"Tech Lead\"] || \"\"\r\n      });\r\n    });\r\n    TechnicianData.on(\"expirationDateChange\", () => {\r\n      this.setState({\r\n        expirationDate: TechnicianData.getFormDate()\r\n      });\r\n    });\r\n    TechnicianData.on(\"noValidDate\", () => {\r\n      this.setState({\r\n        showDateError: true\r\n      });\r\n    });\r\n    TechnicianData.on(\"emptyName\", () => {\r\n      this.setState({\r\n        showNameError: true\r\n      });\r\n    });\r\n  }\r\n  changeNameValue(name) {\r\n    this.setState({\r\n      nameFieldValue: name\r\n    });\r\n    updateNameField(name);\r\n  }\r\n  resetNameValidate() {\r\n    // reset the error message\r\n    this.setState({\r\n      showNameError: false\r\n    });\r\n  }\r\n  resetDateValidate() {\r\n    // reset the error message\r\n    this.setState({\r\n      showDateError: false\r\n    });\r\n  }\r\n  handleDateChange(date) {\r\n    this.setState({\r\n      showDateError: false\r\n    });\r\n    if (\r\n      dayjs(date).isValid() && // check if the date format is valid and if the date is in the date picker's default range\r\n      dayjs(date).isBetween(\"1900-01-01\", \"2100-10-30\", null, \"[]\")\r\n    ) {\r\n      updateExpirationDate(dayjs(date).format(\"MM/DD/YYYY\"));\r\n    } else {\r\n      updateExpirationDate(\"invalid\");\r\n    }\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        {this.state.selectedTechnician === \"\" ? (\r\n          <p>New Tech Lead</p>\r\n        ) : (\r\n          <p>Tech Lead ID:{this.state.selectedTechnician.id}</p>\r\n        )}\r\n        <TextField\r\n          onFocus={() => this.resetNameValidate()}\r\n          error={this.state.showNameError}\r\n          helperText={this.state.showNameError ? \"name is required\" : \"\"}\r\n          className={classes.nameField}\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n          value={this.state.nameFieldValue}\r\n          onChange={event => this.changeNameValue(event.target.value)}\r\n        />\r\n        <div style={this.styles.datePickerPos}>\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <KeyboardDatePicker\r\n              onFocus={() => this.resetDateValidate()}\r\n              error={this.state.showDateError}\r\n              helperText={\r\n                this.state.showDateError\r\n                  ? \"valid date is required (01/01/1900 - 01/01/2100)\"\r\n                  : \"\"\r\n              }\r\n              margin=\"normal\"\r\n              className={classes.nameField}\r\n              label=\"Expiration Date\"\r\n              format=\"MM/dd/yyyy\"\r\n              inputVariant=\"outlined\"\r\n              value={this.state.expirationDate}\r\n              onChange={event => this.handleDateChange(event)}\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nNameAndDate.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(NameAndDate);\r\n","import React, { Component } from \"react\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport TechnicianData from \"../store/technicianData\";\r\nimport { updateDescription, updateSchedule } from \"../action/technicianActions\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n// shift table and description component\r\nclass TableAndDescription extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      description: TechnicianData.getDescription(),\r\n      schedule: TechnicianData.getShiftSchedule()\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    TechnicianData.on(\"descriptionChange\", () => {\r\n      this.setState({\r\n        description: TechnicianData.getDescription()\r\n      });\r\n    });\r\n    TechnicianData.on(\"scheduleChange\", () => {\r\n      this.setState({\r\n        schedule: TechnicianData.getShiftSchedule()\r\n      });\r\n    });\r\n  }\r\n  styles = {\r\n    table: {\r\n      width: \"100%\",\r\n      border: \"1px solid #00acc1\",\r\n      borderRadius: \"4px\"\r\n    },\r\n    textAreaPos: {\r\n      margin: \"10px\"\r\n    },\r\n    textAreaLabel: {\r\n      verticalAlign: \"top\",\r\n      margin: \"10px\"\r\n    },\r\n    textArea: {\r\n      width: \"500px\",\r\n      fontSize: \"16px\"\r\n    },\r\n    tableRow: {\r\n      height: \"60px\"\r\n    },\r\n    timeInputField: {\r\n      margin: \"0 20px\",\r\n      width: \"120px\"\r\n    },\r\n    tableHeaderText: {\r\n      margin: \"0 20px\",\r\n      width: \"100px\",\r\n      fontSize: \"16px\",\r\n      paddingLeft: \"20px\"\r\n    }\r\n  };\r\n  handleDescriptionChange(value) {\r\n    updateDescription(value);\r\n  }\r\n  changeTimeValue(index, type, value) {\r\n    updateSchedule(index, type, value);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={this.styles.table}>\r\n          <List aria-label=\"main mailbox folders\">\r\n            <ListItem style={this.styles.tableRow}>\r\n              <ListItemText primary=\"Shift Schedule (24-hour)\" />\r\n              <span style={this.styles.tableHeaderText}>From</span>\r\n              <span style={this.styles.tableHeaderText}>To</span>\r\n            </ListItem>\r\n            {this.state.schedule.map((day, index) => (\r\n              <React.Fragment key={index}>\r\n                <ListItem style={this.styles.tableRow}>\r\n                  <ListItemText primary={day.Day} />\r\n                  <TextField\r\n                    style={this.styles.timeInputField}\r\n                    type=\"number\"\r\n                    InputProps={{ inputProps: { min: 0, max: 23 } }}\r\n                    value={this.state.schedule[index][\"FromTime\"]}\r\n                    onChange={event =>\r\n                      this.changeTimeValue(\r\n                        index,\r\n                        \"FromTime\",\r\n                        event.target.value\r\n                      )\r\n                    }\r\n                    variant=\"outlined\"\r\n                  />\r\n                  <TextField\r\n                    style={this.styles.timeInputField}\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                      inputProps: {\r\n                        min: this.state.schedule[index][\"FromTime\"],\r\n                        max: 23\r\n                      }\r\n                    }}\r\n                    value={this.state.schedule[index][\"EndTime\"]}\r\n                    onChange={event =>\r\n                      this.changeTimeValue(index, \"EndTime\", event.target.value)\r\n                    }\r\n                    variant=\"outlined\"\r\n                  />\r\n                </ListItem>\r\n                {index !== this.state.schedule.length - 1 ? <Divider /> : null}\r\n              </React.Fragment>\r\n            ))}\r\n          </List>\r\n        </div>\r\n        <div style={this.styles.textAreaPos}>\r\n          <span style={this.styles.textAreaLabel}>Description:</span>\r\n          <TextareaAutosize\r\n            rowsMin={4}\r\n            style={this.styles.textArea}\r\n            value={this.state.description}\r\n            onChange={event => this.handleDescriptionChange(event.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableAndDescription;\r\n","import React, { Component } from \"react\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport TechnicianData from \"../store/technicianData\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { addOrEditTechnician } from \"../action/technicianActions\";\r\n\r\n//progress bar and the submit button component\r\nconst styles = theme => ({\r\n  progressBar: {\r\n    \"& .MuiLinearProgress-barColorPrimary\": {\r\n      backgroundColor: \"#00acc1\"\r\n    },\r\n    \"& .MuiLinearProgress-colorPrimary\": {\r\n      backgroundColor: \"#b2ebf2\"\r\n    }\r\n  },\r\n  submitBtn: {\r\n    backgroundColor: \"#00acc1\",\r\n    position: \"absolute\",\r\n    left: \"0\",\r\n    right: \"0\",\r\n    margin: \"auto\",\r\n    top: \"30px\",\r\n    padding: \"10px 40px\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#006064\"\r\n    }\r\n  }\r\n});\r\n\r\nclass ProgressAndSubmit extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      formProgress: TechnicianData.getFormProgress()\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    TechnicianData.on(\"formProgressChange\", () => {\r\n      this.setState({\r\n        formProgress: TechnicianData.getFormProgress()\r\n      });\r\n    });\r\n  }\r\n  addOrEditTechnician() {\r\n    addOrEditTechnician();\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n        <LinearProgress\r\n          variant=\"buffer\"\r\n          valueBuffer={0}\r\n          value={this.state.formProgress}\r\n          className={classes.progressBar}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          color=\"primary\"\r\n          className={classes.submitBtn}\r\n          onClick={() => this.addOrEditTechnician()}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nProgressAndSubmit.propTypes = {\r\n  classes: PropTypes.object.isRequired\r\n};\r\nexport default withStyles(styles)(ProgressAndSubmit);\r\n","import React, { Component } from \"react\";\nimport ShiftSwitch from \"./components/shiftSwitch\";\nimport TechnicianSearchList from \"./components/technicianSearchList\";\nimport NameAndDate from \"./components/nameAndDate\";\nimport TableAndDescription from \"./components/tableAndDescription\";\nimport ProgressAndSubmit from \"./components/progressAndSubmit\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"shift-form\">\n          <div className=\"switch-switch-pos\">\n            <ShiftSwitch />\n          </div>\n          <div className=\"form\">\n            <div className=\"form-left\">\n              <TableAndDescription />\n            </div>\n            <div className=\"form-right\">\n              <div>\n                <NameAndDate />\n              </div>\n            </div>\n          </div>\n          <div className=\"form-footer\">\n            <ProgressAndSubmit />\n          </div>\n        </div>\n        <div className=\"technician-search-list\">\n          <TechnicianSearchList />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}